{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nexport class BaseService {\n  constructor() {\n    this._backendURL = {};\n    // build backend base url\n    let baseUrl = `${environment.backend.protocol}://${environment.backend.host}`;\n    if (environment.backend.port) {\n      baseUrl += `:${environment.backend.port}`;\n    }\n    // build all backend urls\n    // @ts-ignore\n    Object.keys(environment.backend.endpoints).forEach(k => this._backendURL[k] = `${baseUrl}${environment.backend.endpoints[k]}`);\n  }\n  get backenURL() {\n    return this._backendURL;\n  }\n  storeToken(token) {\n    localStorage.setItem('token', JSON.stringify(token));\n  }\n  getToken() {\n    const tokenString = localStorage.getItem('token');\n    if (tokenString) {\n      return JSON.parse(tokenString);\n    }\n    return null;\n  }\n  clearToken() {\n    localStorage.removeItem('token');\n  }\n  isConnected() {\n    return this.getToken() === null ? false : true;\n  }\n  /**\n  * Function to return request options\n  */\n  options(withToken, headerList = {}) {\n    if (withToken) {\n      return {\n        headers: new HttpHeaders(Object.assign({\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${this.getToken()}`\n        }, headerList))\n      };\n    }\n    return {\n      headers: new HttpHeaders(Object.assign({\n        'Content-Type': 'application/json'\n      }, headerList))\n    };\n  }\n  static #_ = this.ɵfac = function BaseService_Factory(t) {\n    return new (t || BaseService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BaseService,\n    factory: BaseService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","environment","BaseService","constructor","_backendURL","baseUrl","backend","protocol","host","port","Object","keys","endpoints","forEach","k","backenURL","storeToken","token","localStorage","setItem","JSON","stringify","getToken","tokenString","getItem","parse","clearToken","removeItem","isConnected","options","withToken","headerList","headers","assign","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\arthu\\OneDrive\\Documents\\Work\\Master\\M2\\Web\\Projet\\nwt-project\\front\\src\\app\\services\\base.service.ts"],"sourcesContent":["import { HttpEvent, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from 'src/environments/environment';\r\nimport { LoginRegister } from '../types/login-register.type';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class BaseService {\r\n  // private property to store all backend URLs\r\n  private readonly _backendURL: any;\r\n\r\n  constructor() {\r\n    this._backendURL = {};\r\n\r\n    // build backend base url\r\n    let baseUrl = `${environment.backend.protocol}://${environment.backend.host}`;\r\n    if (environment.backend.port) {\r\n      baseUrl += `:${environment.backend.port}`;\r\n    }\r\n\r\n    // build all backend urls\r\n    // @ts-ignore\r\n    Object.keys(environment.backend.endpoints).forEach(k => this._backendURL[k] = `${baseUrl}${environment.backend.endpoints[k]}`);\r\n  }\r\n\r\n  get backenURL() {\r\n    return this._backendURL;\r\n  }\r\n\r\n  storeToken(token: HttpEvent<LoginRegister>) {\r\n    localStorage.setItem('token', JSON.stringify(token));\r\n  }\r\n\r\n  getToken() {\r\n    const tokenString = localStorage.getItem('token');\r\n    if (tokenString) {\r\n      return JSON.parse(tokenString);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  clearToken() {\r\n    localStorage.removeItem('token');\r\n  }\r\n\r\n  isConnected(): boolean {\r\n    return this.getToken() === null ? false : true;\r\n  }\r\n\r\n  /**\r\n * Function to return request options\r\n */\r\n  options(withToken: boolean, headerList: object = {}): any {\r\n    if (withToken) {\r\n      return {\r\n        headers: new HttpHeaders(Object.assign(\r\n          {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${this.getToken()}`\r\n          },\r\n          headerList))\r\n      };\r\n    }\r\n    return {\r\n      headers: new HttpHeaders(Object.assign(\r\n        {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        headerList))\r\n    };\r\n  }\r\n}\r\n"],"mappings":"AAAA,SAAoBA,WAAW,QAAQ,sBAAsB;AAE7D,SAASC,WAAW,QAAQ,8BAA8B;;AAM1D,OAAM,MAAOC,WAAW;EAItBC,YAAA;IACE,IAAI,CAACC,WAAW,GAAG,EAAE;IAErB;IACA,IAAIC,OAAO,GAAG,GAAGJ,WAAW,CAACK,OAAO,CAACC,QAAQ,MAAMN,WAAW,CAACK,OAAO,CAACE,IAAI,EAAE;IAC7E,IAAIP,WAAW,CAACK,OAAO,CAACG,IAAI,EAAE;MAC5BJ,OAAO,IAAI,IAAIJ,WAAW,CAACK,OAAO,CAACG,IAAI,EAAE;;IAG3C;IACA;IACAC,MAAM,CAACC,IAAI,CAACV,WAAW,CAACK,OAAO,CAACM,SAAS,CAAC,CAACC,OAAO,CAACC,CAAC,IAAI,IAAI,CAACV,WAAW,CAACU,CAAC,CAAC,GAAG,GAAGT,OAAO,GAAGJ,WAAW,CAACK,OAAO,CAACM,SAAS,CAACE,CAAC,CAAC,EAAE,CAAC;EAChI;EAEA,IAAIC,SAASA,CAAA;IACX,OAAO,IAAI,CAACX,WAAW;EACzB;EAEAY,UAAUA,CAACC,KAA+B;IACxCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEC,IAAI,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAC;EACtD;EAEAK,QAAQA,CAAA;IACN,MAAMC,WAAW,GAAGL,YAAY,CAACM,OAAO,CAAC,OAAO,CAAC;IACjD,IAAID,WAAW,EAAE;MACf,OAAOH,IAAI,CAACK,KAAK,CAACF,WAAW,CAAC;;IAEhC,OAAO,IAAI;EACb;EAEAG,UAAUA,CAAA;IACRR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;EAClC;EAEAC,WAAWA,CAAA;IACT,OAAO,IAAI,CAACN,QAAQ,EAAE,KAAK,IAAI,GAAG,KAAK,GAAG,IAAI;EAChD;EAEA;;;EAGAO,OAAOA,CAACC,SAAkB,EAAEC,UAAA,GAAqB,EAAE;IACjD,IAAID,SAAS,EAAE;MACb,OAAO;QACLE,OAAO,EAAE,IAAIhC,WAAW,CAACU,MAAM,CAACuB,MAAM,CACpC;UACE,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAU,IAAI,CAACX,QAAQ,EAAE;SAC3C,EACDS,UAAU,CAAC;OACd;;IAEH,OAAO;MACLC,OAAO,EAAE,IAAIhC,WAAW,CAACU,MAAM,CAACuB,MAAM,CACpC;QACE,cAAc,EAAE;OACjB,EACDF,UAAU,CAAC;KACd;EACH;EAAC,QAAAG,CAAA,G;qBA/DUhC,WAAW;EAAA;EAAA,QAAAiC,EAAA,G;WAAXjC,WAAW;IAAAkC,OAAA,EAAXlC,WAAW,CAAAmC,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}