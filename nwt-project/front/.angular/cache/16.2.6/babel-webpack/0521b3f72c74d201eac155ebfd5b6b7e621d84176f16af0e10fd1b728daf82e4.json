{"ast":null,"code":"import { filter, merge, mergeMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../services/quiz.service\";\nimport * as i3 from \"../services/base.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"../question/question.component\";\nfunction QuizComponent_app_question_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"app-question\", 3);\n    i0.ɵɵlistener(\"setSelected\", function QuizComponent_app_question_3_Template_app_question_setSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.changeAnswerSelected($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const question_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    i0.ɵɵproperty(\"question\", question_r1)(\"questionId\", i_r2);\n  }\n}\nexport class QuizComponent {\n  constructor(_route, _quizService, _baseService, _router) {\n    this._route = _route;\n    this._quizService = _quizService;\n    this._baseService = _baseService;\n    this._router = _router;\n    this._quiz = {};\n  }\n  ngOnInit() {\n    merge(this._route.params.pipe(filter(params => !!params.id), mergeMap(params => this._quizService.fetchOne(params.id)))).subscribe({\n      next: quiz => this._quiz = quiz,\n      error: () => {\n        // manage error when quiz doesn't exist in DB\n        this._quiz = this._quizService.defaultQuiz;\n      }\n    });\n    if (!this._baseService.isConnected()) {\n      this._router.navigate(['/login']);\n    }\n  }\n  get quiz() {\n    return this._quiz.questions;\n  }\n  get title() {\n    return this._quiz.title;\n  }\n  /**\n   * Rajoute un attribut isSelected : boolean à toutes les réponses\n   * Ce champ sert à enregistrer les réponses de l'utilisateur\n   * Cette donnée n'a pas besoin d'être enregistrer sur la bdd\n   */\n  addIsSelectedToAnswers() {\n    this._quiz.questions.forEach(question => {\n      question.answers.forEach(answer => {\n        answer.isSelected = false;\n      });\n    });\n  }\n  changeAnswerSelected(event) {\n    var isSelected = this._quiz.questions[event.questionId].answers[event.answerId].isSelected;\n    this._quiz.questions[event.questionId].answers[event.answerId].isSelected = !isSelected;\n  }\n  validateQuiz() {\n    let score = 0.00;\n    this._quiz.questions.forEach(question => {\n      const selectedAnswers = question.answers.filter(answer => answer.isSelected);\n      const correctAnswers = question.answers.filter(answer => answer.isCorrect);\n      if (selectedAnswers.length === correctAnswers.length && selectedAnswers.every(answer => correctAnswers.includes(answer))) {\n        // Toutes les réponses sélectionnées sont correctes\n        score += correctAnswers.length;\n      }\n      //S'il y a plus de réponses selectionnées que de bonne réponse, \n      //le score équivaut au nombre de bonne réponse divisé par le nombre de réponse selectionnées\n      //1 bonne réponse, 2 réponses sélectionnées (1 bonne 1 fausse) : 0.50\n      //1 bonne réponse, 3 réponses sélectionnées (1 bonne 2 fausses): 0.33\n      /*if (selectedAnswers.length > correctAnswers.length && selectedAnswers.find((answer) => correctAnswers.includes(answer))) {\n        score += correctAnswers.length/selectedAnswers.length;\n        //A revoir car si 3 bonnes réponses en selectionnant 4 réponses : 0.75/3\n      }*/\n      /*\n      if (selectedAnswers.length < correctAnswers.length && selectedAnswers.every((answer) => correctAnswers.includes(answer))) {\n        score += selectedAnswers.length;\n      }*/\n    });\n\n    alert(`Score: ${score.toFixed(2)}/${this._quiz.questions.length}`);\n    //console.log(this._quiz);\n  }\n  static #_ = this.ɵfac = function QuizComponent_Factory(t) {\n    return new (t || QuizComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.QuizService), i0.ɵɵdirectiveInject(i3.BaseService), i0.ɵɵdirectiveInject(i1.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: QuizComponent,\n    selectors: [[\"app-quiz\"]],\n    decls: 6,\n    vars: 2,\n    consts: [[\"id\", \"quiz\", 1, \"quiz-container\"], [\"class\", \"question\", 3, \"question\", \"questionId\", \"setSelected\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", \"id\", \"submit\", 1, \"btn\", \"btn-outline-primary\", \"fs-4\", 3, \"click\"], [1, \"question\", 3, \"question\", \"questionId\", \"setSelected\"]],\n    template: function QuizComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, QuizComponent_app_question_3_Template, 1, 2, \"app-question\", 1);\n        i0.ɵɵelementStart(4, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function QuizComponent_Template_button_click_4_listener() {\n          return ctx.validateQuiz();\n        });\n        i0.ɵɵtext(5, \"Envoyer\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(ctx.title);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.quiz);\n      }\n    },\n    dependencies: [i4.NgForOf, i5.QuestionComponent],\n    styles: [\".question[_ngcontent-%COMP%]{\\n  display: block;\\n  margin-bottom: 40px;\\n}\\n\\n.quiz-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcXVpei9xdWl6LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxjQUFjO0VBQ2QsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UsYUFBYTtFQUNiLHNCQUFzQjtFQUN0QixtQkFBbUI7RUFDbkIsdUJBQXVCO0FBQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiLnF1ZXN0aW9ue1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG4gIG1hcmdpbi1ib3R0b206IDQwcHg7XHJcbn1cclxuXHJcbi5xdWl6LWNvbnRhaW5lciB7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["filter","merge","mergeMap","i0","ɵɵelementStart","ɵɵlistener","QuizComponent_app_question_3_Template_app_question_setSelected_0_listener","$event","ɵɵrestoreView","_r4","ctx_r3","ɵɵnextContext","ɵɵresetView","changeAnswerSelected","ɵɵelementEnd","ɵɵproperty","question_r1","i_r2","QuizComponent","constructor","_route","_quizService","_baseService","_router","_quiz","ngOnInit","params","pipe","id","fetchOne","subscribe","next","quiz","error","defaultQuiz","isConnected","navigate","questions","title","addIsSelectedToAnswers","forEach","question","answers","answer","isSelected","event","questionId","answerId","validateQuiz","score","selectedAnswers","correctAnswers","isCorrect","length","every","includes","alert","toFixed","_","ɵɵdirectiveInject","i1","ActivatedRoute","i2","QuizService","i3","BaseService","Router","_2","selectors","decls","vars","consts","template","QuizComponent_Template","rf","ctx","ɵɵtext","ɵɵtemplate","QuizComponent_app_question_3_Template","QuizComponent_Template_button_click_4_listener","ɵɵadvance","ɵɵtextInterpolate"],"sources":["C:\\Users\\arthu\\OneDrive\\Documents\\Work\\Master\\M2\\Web\\Projet\\nwt-project\\front\\src\\app\\quiz\\quiz.component.ts","C:\\Users\\arthu\\OneDrive\\Documents\\Work\\Master\\M2\\Web\\Projet\\nwt-project\\front\\src\\app\\quiz\\quiz.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Question, Quiz } from '../types/quiz.type';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { QuizService } from '../services/quiz.service';\r\nimport { filter, merge, mergeMap } from 'rxjs';\r\nimport { BaseService } from '../services/base.service';\r\n\r\n@Component({\r\n  selector: 'app-quiz',\r\n  templateUrl: './quiz.component.html',\r\n  styleUrls: ['./quiz.component.css']\r\n})\r\nexport class QuizComponent {\r\n  private _quiz: Quiz;\r\n\r\n  constructor(private _route: ActivatedRoute, private _quizService: QuizService, private _baseService: BaseService, private _router: Router) {\r\n    this._quiz = {} as Quiz;\r\n  }\r\n\r\n  ngOnInit() {\r\n    merge(\r\n      this._route.params.pipe(\r\n        filter((params: any) => !!params.id),\r\n        mergeMap((params: any) => this._quizService.fetchOne(params.id))\r\n      )\r\n    )\r\n      .subscribe({\r\n        next: (quiz: Quiz) => this._quiz = quiz,\r\n        error: () => {\r\n          // manage error when quiz doesn't exist in DB\r\n          this._quiz = this._quizService.defaultQuiz;\r\n        }\r\n      });\r\n    if (!this._baseService.isConnected()) {\r\n      this._router.navigate(['/login']);\r\n    }\r\n  }\r\n\r\n  get quiz(): Question[] {\r\n    return this._quiz.questions;\r\n  }\r\n\r\n  get title(): string {\r\n    return this._quiz.title;\r\n  }\r\n\r\n  /**\r\n   * Rajoute un attribut isSelected : boolean à toutes les réponses\r\n   * Ce champ sert à enregistrer les réponses de l'utilisateur\r\n   * Cette donnée n'a pas besoin d'être enregistrer sur la bdd\r\n   */\r\n  addIsSelectedToAnswers() {\r\n    this._quiz.questions.forEach((question) => {\r\n      question.answers.forEach((answer) => {\r\n        answer.isSelected = false;\r\n      });\r\n    });\r\n  }\r\n\r\n  changeAnswerSelected(event: { questionId: number; answerId: number }) {\r\n    var isSelected = this._quiz.questions[event.questionId].answers[event.answerId].isSelected;\r\n    this._quiz.questions[event.questionId].answers[event.answerId].isSelected = !isSelected;\r\n  }\r\n\r\n  validateQuiz() {\r\n    let score: number = 0.00;\r\n\r\n    this._quiz.questions.forEach((question) => {\r\n      const selectedAnswers = question.answers.filter((answer) => answer.isSelected);\r\n      const correctAnswers = question.answers.filter((answer) => answer.isCorrect);\r\n\r\n      if (selectedAnswers.length === correctAnswers.length && selectedAnswers.every((answer) => correctAnswers.includes(answer))) {\r\n        // Toutes les réponses sélectionnées sont correctes\r\n        score += correctAnswers.length;\r\n      }\r\n\r\n      //S'il y a plus de réponses selectionnées que de bonne réponse, \r\n      //le score équivaut au nombre de bonne réponse divisé par le nombre de réponse selectionnées\r\n      //1 bonne réponse, 2 réponses sélectionnées (1 bonne 1 fausse) : 0.50\r\n      //1 bonne réponse, 3 réponses sélectionnées (1 bonne 2 fausses): 0.33\r\n      /*if (selectedAnswers.length > correctAnswers.length && selectedAnswers.find((answer) => correctAnswers.includes(answer))) {\r\n        score += correctAnswers.length/selectedAnswers.length;\r\n        //A revoir car si 3 bonnes réponses en selectionnant 4 réponses : 0.75/3\r\n      }*/\r\n\r\n      /*\r\n      if (selectedAnswers.length < correctAnswers.length && selectedAnswers.every((answer) => correctAnswers.includes(answer))) {\r\n        score += selectedAnswers.length;\r\n      }*/\r\n    });\r\n    alert(`Score: ${score.toFixed(2)}/${this._quiz.questions.length}`);\r\n    //console.log(this._quiz);\r\n\r\n  }\r\n}\r\n\r\n\r\n","<div class=\"quiz-container\" id=\"quiz\">\r\n    <h1>{{title}}</h1>\r\n    <app-question class=\"question\" \r\n        (setSelected)=\"changeAnswerSelected($event)\"\r\n        *ngFor=\"let question of quiz; let i = index\" \r\n        [question]=\"question\" [questionId]=\"i\">\r\n    </app-question>\r\n    <button type=\"button\" id=\"submit\" class=\"btn btn-outline-primary fs-4\" (click)=\"validateQuiz()\">Envoyer</button>\r\n</div>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}