{"ast":null,"code":"import { defaultIfEmpty, filter } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./base.service\";\nexport class QuizService {\n  constructor(_http, _baseService) {\n    this._http = _http;\n    this._baseService = _baseService;\n    this._defaultQuiz = {\n      title: \"Quiz par défaut\",\n      questions: [{\n        textQuestion: \"Quelle est la réponse en deuxième position ?\",\n        answers: [{\n          textAnswer: \"Ici\",\n          isCorrect: false\n        }, {\n          textAnswer: \"Là\",\n          isCorrect: true\n        }]\n      }, {\n        textQuestion: \"Les réponses sont-elles simples ?\",\n        answers: [{\n          textAnswer: \"Oui\",\n          isCorrect: true\n        }, {\n          textAnswer: \"Non\",\n          isCorrect: false\n        }]\n      }]\n    };\n  }\n  /**\n   * Returns private property _defaultQuiz\n   */\n  get defaultQuiz() {\n    return this._defaultQuiz;\n  }\n  /**\n   * Function to create a new person\n   */\n  create(quiz) {\n    this._http.post(this._baseService.backenURL.createQuiz, quiz, this._baseService.options(true)).subscribe({\n      error: e => console.error(e),\n      complete: () => console.info('Quiz créé avec succès')\n    });\n  }\n  /**\n   * Function to return list of quiz\n   */\n  fetch() {\n    return this._http.get(this._baseService.backenURL.allQuiz).pipe(filter(quiz => !!quiz), defaultIfEmpty([]));\n  }\n  /**\n   * Function to return list of quiz of a user\n   */\n  fetchByUser() {\n    return this._http.get(this._baseService.backenURL.myQuiz, this._baseService.options(true)).pipe(filter(quiz => !!quiz), defaultIfEmpty([]));\n  }\n  /**\n   * Function to return one quiz for current id\n   */\n  fetchOne(id) {\n    return this._http.get(this._baseService.backenURL.oneQuiz.replace(':id', id));\n  }\n  delete(id) {\n    return this._http.delete(this._baseService.backenURL.oneQuiz.replace(':id', id));\n  }\n  static #_ = this.ɵfac = function QuizService_Factory(t) {\n    return new (t || QuizService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.BaseService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: QuizService,\n    factory: QuizService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["defaultIfEmpty","filter","QuizService","constructor","_http","_baseService","_defaultQuiz","title","questions","textQuestion","answers","textAnswer","isCorrect","defaultQuiz","create","quiz","post","backenURL","createQuiz","options","subscribe","error","e","console","complete","info","fetch","get","allQuiz","pipe","fetchByUser","myQuiz","fetchOne","id","oneQuiz","replace","delete","_","i0","ɵɵinject","i1","HttpClient","i2","BaseService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\arthu\\OneDrive\\Documents\\Work\\Master\\M2\\Web\\Projet\\nwt-project\\front\\src\\app\\services\\quiz.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Quiz } from '../types/quiz.type';\r\nimport { HttpClient, HttpEvent, HttpHeaders, HttpResponse } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Observable, defaultIfEmpty, filter, map } from 'rxjs';\r\nimport { BaseService } from './base.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class QuizService {\r\n  // private property to store default person\r\n  private _defaultQuiz: Quiz;\r\n\r\n  constructor(private _http: HttpClient, private _baseService: BaseService) {\r\n    this._defaultQuiz = {\r\n      title: \"Quiz par défaut\",\r\n      questions: [\r\n        {\r\n          textQuestion: \"Quelle est la réponse en deuxième position ?\",\r\n          answers: [\r\n            {\r\n              textAnswer: \"Ici\",\r\n              isCorrect: false\r\n            },\r\n            {\r\n              textAnswer: \"Là\",\r\n              isCorrect: true\r\n            }\r\n          ]\r\n        },\r\n        {\r\n          textQuestion: \"Les réponses sont-elles simples ?\",\r\n          answers: [\r\n            {\r\n              textAnswer: \"Oui\",\r\n              isCorrect: true\r\n            },\r\n            {\r\n              textAnswer: \"Non\",\r\n              isCorrect: false\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    };\r\n\r\n  }\r\n\r\n  /**\r\n   * Returns private property _defaultQuiz\r\n   */\r\n  get defaultQuiz(): Quiz {\r\n    return this._defaultQuiz;\r\n  }\r\n\r\n  /**\r\n   * Function to create a new person\r\n   */\r\n  create(quiz: Quiz) {\r\n    this._http.post<Quiz>(this._baseService.backenURL.createQuiz, quiz, this._baseService.options(true))\r\n      .subscribe({\r\n        error: (e) => console.error(e),\r\n        complete: () => console.info('Quiz créé avec succès')\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Function to return list of quiz\r\n   */\r\n  fetch(): Observable<Quiz[]> {\r\n    return this._http.get<Quiz[]>(this._baseService.backenURL.allQuiz)\r\n      .pipe(\r\n        filter((quiz: Quiz[]) => !!quiz),\r\n        defaultIfEmpty([])\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Function to return list of quiz of a user\r\n   */\r\n  fetchByUser(): Observable<Quiz[]> {\r\n    return this._http.get<Quiz[]>(this._baseService.backenURL.myQuiz, this._baseService.options(true))\r\n      .pipe(\r\n        filter((quiz: any) => !!quiz),\r\n        defaultIfEmpty([])\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Function to return one quiz for current id\r\n   */\r\n  fetchOne(id: string): Observable<Quiz> {\r\n    return this._http.get<Quiz>(this._baseService.backenURL.oneQuiz.replace(':id', id));\r\n  }\r\n\r\n  delete(id: string) {\r\n    return this._http.delete<Quiz>(this._baseService.backenURL.oneQuiz.replace(':id', id));\r\n  }\r\n\r\n}\r\n"],"mappings":"AAIA,SAAqBA,cAAc,EAAEC,MAAM,QAAa,MAAM;;;;AAM9D,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,KAAiB,EAAUC,YAAyB;IAApD,KAAAD,KAAK,GAALA,KAAK;IAAsB,KAAAC,YAAY,GAAZA,YAAY;IACzD,IAAI,CAACC,YAAY,GAAG;MAClBC,KAAK,EAAE,iBAAiB;MACxBC,SAAS,EAAE,CACT;QACEC,YAAY,EAAE,8CAA8C;QAC5DC,OAAO,EAAE,CACP;UACEC,UAAU,EAAE,KAAK;UACjBC,SAAS,EAAE;SACZ,EACD;UACED,UAAU,EAAE,IAAI;UAChBC,SAAS,EAAE;SACZ;OAEJ,EACD;QACEH,YAAY,EAAE,mCAAmC;QACjDC,OAAO,EAAE,CACP;UACEC,UAAU,EAAE,KAAK;UACjBC,SAAS,EAAE;SACZ,EACD;UACED,UAAU,EAAE,KAAK;UACjBC,SAAS,EAAE;SACZ;OAEJ;KAEJ;EAEH;EAEA;;;EAGA,IAAIC,WAAWA,CAAA;IACb,OAAO,IAAI,CAACP,YAAY;EAC1B;EAEA;;;EAGAQ,MAAMA,CAACC,IAAU;IACf,IAAI,CAACX,KAAK,CAACY,IAAI,CAAO,IAAI,CAACX,YAAY,CAACY,SAAS,CAACC,UAAU,EAAEH,IAAI,EAAE,IAAI,CAACV,YAAY,CAACc,OAAO,CAAC,IAAI,CAAC,CAAC,CACjGC,SAAS,CAAC;MACTC,KAAK,EAAGC,CAAC,IAAKC,OAAO,CAACF,KAAK,CAACC,CAAC,CAAC;MAC9BE,QAAQ,EAAEA,CAAA,KAAMD,OAAO,CAACE,IAAI,CAAC,uBAAuB;KACrD,CAAC;EACN;EAEA;;;EAGAC,KAAKA,CAAA;IACH,OAAO,IAAI,CAACtB,KAAK,CAACuB,GAAG,CAAS,IAAI,CAACtB,YAAY,CAACY,SAAS,CAACW,OAAO,CAAC,CAC/DC,IAAI,CACH5B,MAAM,CAAEc,IAAY,IAAK,CAAC,CAACA,IAAI,CAAC,EAChCf,cAAc,CAAC,EAAE,CAAC,CACnB;EACL;EAEA;;;EAGA8B,WAAWA,CAAA;IACT,OAAO,IAAI,CAAC1B,KAAK,CAACuB,GAAG,CAAS,IAAI,CAACtB,YAAY,CAACY,SAAS,CAACc,MAAM,EAAE,IAAI,CAAC1B,YAAY,CAACc,OAAO,CAAC,IAAI,CAAC,CAAC,CAC/FU,IAAI,CACH5B,MAAM,CAAEc,IAAS,IAAK,CAAC,CAACA,IAAI,CAAC,EAC7Bf,cAAc,CAAC,EAAE,CAAC,CACnB;EACL;EAEA;;;EAGAgC,QAAQA,CAACC,EAAU;IACjB,OAAO,IAAI,CAAC7B,KAAK,CAACuB,GAAG,CAAO,IAAI,CAACtB,YAAY,CAACY,SAAS,CAACiB,OAAO,CAACC,OAAO,CAAC,KAAK,EAAEF,EAAE,CAAC,CAAC;EACrF;EAEAG,MAAMA,CAACH,EAAU;IACf,OAAO,IAAI,CAAC7B,KAAK,CAACgC,MAAM,CAAO,IAAI,CAAC/B,YAAY,CAACY,SAAS,CAACiB,OAAO,CAACC,OAAO,CAAC,KAAK,EAAEF,EAAE,CAAC,CAAC;EACxF;EAAC,QAAAI,CAAA,G;qBAxFUnC,WAAW,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX1C,WAAW;IAAA2C,OAAA,EAAX3C,WAAW,CAAA4C,IAAA;IAAAC,UAAA,EAFV;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}